--------------------------------------------------------------------------------
2025-01-13 Ver.1.18.0-stable
--------------------------------------------------------------------------------
- Se han modificado las clases "Vector2", "Vector2I32" y "Vector2I64" para soportar ciertas operaciones cuando están declaradas como constantes.  
- Se ha añadido el método "Normal()" a todas estas clases, el cual devuelve el vector normalizado.  
- Se ha añadido el método estático "Zero()" a todas estas clases, el cual devuelve un vector con valor 0.  
- Se ha añadido el método "GetTargetSprite()" a la clase "NGN_Camera", el cual devuelve el sprite actual al que sigue, en caso de existir. En caso contrario, devuelve "NULL".  
- Se ha añadido el método "GetTargetPosition()" a la clase "NGN_Camera", el cual devuelve la posición a la que se le ha ordenado a la cámara colocarse. Este método puede devolver un resultado que no coincida con el devuelto por el método "GetLookAt()", que indica la posición en el mundo de la cámara respetando los límites de la pantalla.  
- Se compila la biblioteca N'gine por defecto en modo dinámico (.dll en Windows, .so en Linux y Raspberry Pi OS), ofreciendo también la versión estática de dicha biblioteca.  
- En los templates de Linux y Raspberry Pi OS, se cambian las rutas de instalación de las bibliotecas al directorio "/usr/local".  
- Se compila la biblioteca con las últimas versiones de SDL2 (2.30.11), SDL2_ttf (2.24.0), SFML (2.6.2) y LodePNG (20241228).  
- Se cambia el script de instalación del entorno en Linux y Raspberry Pi OS para instalar las versiones compiladas de las bibliotecas SDL2 (2.30.11), SDL2_ttf (2.24.0), SFML (2.6.2) y N'gine en el directorio "/usr/local".  
- Se añaden los scripts necesarios para eliminar, en los sistemas basados en Linux, las bibliotecas SDL2, SDL2_ttf, SFML y N'gine instaladas.  
- Se añade el script para instalar en los sistemas basados en Linux todas las dependencias necesarias para compilar las bibliotecas SDL2 (2.30.11), SDL2_ttf (2.24.0), SFML (2.6.2) y N'gine.  
- Se añaden los scripts para compilar en los sistemas Linux las bibliotecas SDL2 (2.30.11), SDL2_ttf (2.24.0) y SFML (2.6.2). Es necesario descargar previamente el código fuente de dichas bibliotecas.  
- Se actualiza el proyecto de Code::Blocks para compilar N'gine tanto en modo dinámico como en modo estático.  
- Se actualizan todas las utilidades de N'gine que utilizan la biblioteca LodePNG a su última versión.  
- Se han modificado los templates para poder incorporar información adicional al ejecutable a través del archivo "resource.rc".
- La librería y utilidades se han compilado con la versión 14.2 de MinGW64.


--------------------------------------------------------------------------------
2024-07-29 Ver.1.17.0-stable
--------------------------------------------------------------------------------
- Se ha añadido el parámetro "err" a los métodos de carga de recursos de la clase "NGN_Resources", el cual permite escoger si mostrar y registrar el error en caso de que el recurso no se encuentre.
- Se han actualizado los scripts de instalación de la librería para los entornos Linux y Raspberry Pi OS.
- Se ha realizado una optimización menor en la lectura de teclas/botones de la clase NGN_Input.
- Se ha corregido un error en la clase NGN_Camera, que impedía habilitar correctamente los fondos virtuales cuando se usaban texturas.
- Se ha optimizado el algoritmo de actualización de la clase NGN_Camera.
- Se ha añadido el método CheckIfRegistered() en la clase NGN_Camera, el cual verifica si un sprite está registrado actualmente en la cámara.
- Se ha añadido el método GetLookAt() en la clase NGN_Camera, el cual devuelve el punto al que está mirando la cámara en el mundo.
- Se ha añadido el método GetRendererSize() en la clase NGN_Camera, el cual devuelve el tamaño del renderizador de la cámara.
- Se ha añadido el método Shake() en la clase NGN_Camera, el cual crea un efecto de temblor en la escena.
- En los templates, se han añadido scripts para la búsqueda de dependencias en los entornos Linux y Raspberry Pi OS.
- En Windows, se ha actualizado la compilación de la librería usando las versiones SDL2 2.30.5, SDL_TTF 2.22.0 y LodePNG 20230410.


--------------------------------------------------------------------------------
2024-03-16 Ver.1.16.0-estable
--------------------------------------------------------------------------------
- Se ha corregido un error ortográfico en el mensaje de error del tipo de archivo desconocido en la clase NGN_Resources.
- Se han añadido métodos a la clase NGN_Resources para eliminar un recurso específico de un repositorio.
- En la versión para Windows, se han vuelto a compilar la biblioteca y las utilidades con la última versión disponible de MinGW (gcc-13.2.0).
- En las versiones para Linux y Raspberry Pi OS, se han vuelto a compilar la biblioteca y las utilidades con las últimas versiones disponibles.
- Se han actualizado todos los templates para compilar con el flag -std=c++20.


--------------------------------------------------------------------------------
2023-12-12 Ver.1.15.0-stable
--------------------------------------------------------------------------------
- En la clase NGN_Texture, se ha añadido la opción de especificar el color de relleno al utilizar el método ClearContent();
- Se ha reescrito completamente el código de lectura y gestión de los controladores de juegos (gamepads), utilizando las funciones más recientes de SDL2 (SDL_GameController). Esto soluciona el error por el cual, en los sistemas operativos de la familia Windows, el efecto "rumble" de los controladores dejó de funcionar.
- Cambios internos en la búsqueda de animaciones de la clase NGN_Sprite.
- Se ha actualizado la documentación de uso de la librería y se ha añadido la versión en inglés de la misma.
- Se ha eliminado la plantilla de proyectos, fusionándose con la de proyectos avanzados.
- Las versiones de la librería y las utilidades para Raspberry Pi OS se han actualizado para ser compatibles con la última distribución disponible (Bookworm) para 64 bits.


--------------------------------------------------------------------------------
2023-04-30 Ver.1.14.1-stable (Parche NGN_FileSystem v1.3.3)
--------------------------------------------------------------------------------
- Corregido un BUG en la utilidad NGN_FileSystem, el cual, en algunos casos, no ordenaba correctamente la lista de archivos, provocando la creación de una FAT incorrecta en el archivo de empaquetado generado.


--------------------------------------------------------------------------------
2023-04-29 Ver.1.14.0-stable
--------------------------------------------------------------------------------
- Actualizado el método GetVersion() de la clase NGN_System, el cual ahora devuelve además de la versión actual de N'gine, las versiones detectadas de las librerías SDL2, SDL_ttf, SFML y LodePNG.
- Actualizada la versión de SFML a la versión 3.0.0.
- Corregido un bug en el método de renderizado de sprites, el cual causaba que en plataformas ARM de 32 bits los sprites con su centro en coordenadas negativas no se renderizaban como es debido.
- Añadido soporte para usar N'gine en Raspberry PI OS (Raspbian). Se han actualizado todos los templates, herramientas y ejemplos para su uso en esta plataforma.
- Incluidos dos scripts de instalación de las librerías necesarias para Linux Mint y Raspberry OS. Atención: El uso de estos scripts instalará en el sistema las librerías usadas para compilar y usar esta versión de N'gine y sus proyectos, sobrescribiendo las versiones que se encuentren instaladas en el sistema.


--------------------------------------------------------------------------------
2023-04-03 Ver.1.13.0-stable
--------------------------------------------------------------------------------
- Actualizado el template de proyectos avanzados.
- Añadido el método ViewportBackdropColor(); a la clase NGN_Graphics, el cual permite escoger el color de fondo del viewport especificado.
- Añadido el método SetBackdropColor(); a la clase NGN_Graphics, el cual permite escoger el color de fondo del viewport principal.
- Añadidas protecciones a todos los métodos de la clase NGN_Camera con el fin de evitar su uso en el caso de que un parámetro de referencia sea nulo.
- Cambio de la licencia de usuario de CC-4.0 a MIT.
- Actualizadas todas las herramientas, templates y ejemplos para mostrar la nueva licencia, tanto en el código fuente como en los binarios.


--------------------------------------------------------------------------------
2023-02-19 Ver.1.12.0-stable
--------------------------------------------------------------------------------
- Añadida una sobrecarga al método SetViewportClip() de la clase NGN_Graphics, la cual en el caso de existir diferentes viewports, permite configurar el clipping de cada uno de ellos por separado.
- Añadida la clase NGN_Resources, la cual permite crear repositorios de recursos para gestionarlos directamente desde la librería. El nombre interno y archivo de cada recurso se especifica en un archivo de texto, el cual es usado para cargar los recursos listados en el repositorio especificado. Es posible disponer de 127 repositorios de manera simultánea.
- Modificadas las clases NGN_Texture, NGN_TiledBg, NGN_Sprite, NGN_TextLayer y NGN_Sound para admitir la creación o reproducción de elementos usando directamente los recursos de la clase NGN_Resources.
- Añadido el ejemplo del uso de carga de recursos en un repositorio y uso de empaquetado de archivos.
- En la versión de Windows, se ha actualizado la librería SDL2 a la ver.2.26.3 y la librería SDL2_TTF a la ver.2.20.2.
- Añadido el template de code::blocks para la creación de proyectos avanzados.


--------------------------------------------------------------------------------
2022-12-24 Ver.1.11.0-stable
--------------------------------------------------------------------------------
- Añadido el archivo de configuración de flags de compilación de N'gine. Esto permite compilar la librería desconectando ciertas funcionalidades o usando otras alternativas si se ha de desarrollar para plataformas con GPU's de bajo rendimiento o dispositivos portátiles o en sistemas donde no se dispone de las últimas versiones de las librerías usadas por N'gine. Entre otros, es posible desconectar el uso del backbuffer (perdiendo ciertas opciones de filtrado bilineal) o desconectar las funciones avanzadas de audio de SFML, disponibles solo en las últimas versiones de la misma.
- Actualizada la versión de LodePNG.
- Añadidos los operadores += y -= a la clase Vector2 y sus derivadas.
- Añadidos los operadores *= y /= a la clase Vector2 y sus derivadas.
- Reescritura parcial de todas las herramientas para N'gine, para una mejor detección de los parámetros y una apariencia más homogénea.
- Reescritura parcial de todas las clases internas de N'gine, convirtiéndolas en singletons al fin de evitar conflictos por algún descuido. La clase NGN_Camera no se ha convertido, dado que en algún proyecto puede ser necesario disponer de más de una instancia de esta clase.
- N'gine, los templates y los ejemplos se han configurado para seguir la norma C++ 17 (estándar).
- Actualizados los ejemplos de sonido.


--------------------------------------------------------------------------------
2022-07-29 Ver.1.10.0-beta
--------------------------------------------------------------------------------
- Optimizaciones en las rutinas de renderizado, en especial en las de fondos de tiles las cuales, de media, son un 30% más eficientes.
- Corregido el error que causaba un renderizado erróneo de en los fondos de tiles si estos se usaban de múltiples viewports y alguno se colocaba en las coordenadas 0, 0.
- Modificadas las rutinas de apertura de los streams de música. Ahora si no se está utilizando un archivo de empaquetado de datos, no se realizará la precarga en RAM del archivo, realizando el stream directamente desde el sistema de archivos.


--------------------------------------------------------------------------------
2022-05-22 Ver.1.9.0-stable
--------------------------------------------------------------------------------
- Añadido el método GetApplicationFocus(); a la clase NGN_System, el cual devuelve si el foco está sobre la aplicación o no.
- [Windows] Actualizado el compilador GCC de la versión 8.1.0 a la 11.3.0.
- [Windows] Actualizada la versión de SDL2 a la 2.0.22.


--------------------------------------------------------------------------------
2022-04-17 Ver.1.8.0-stable
--------------------------------------------------------------------------------
- Templates para code::blocks actualizados.
- Añadido el método TextFile(); a la clase NGN_Load, el cual permite abrir un archivo de texto para almacenarlo en un string o en un vector de string con las líneas por separado.
- Añadidos los métodos ClearSfx(); y ClearMusic(); a la clase NGN_Sound, los cuales eliminan todos los efectos de sonido o músicas en la cola de reproducción.
- Añadidos los métodos PushMixer(); y PopMixer(); a la clase NGN_Sound, los cuales guardan y restauran los valores actuales de todos los canales del mixer.
- *** BUGFIX *** Solucionado el BUG que causaba desbordamientos de memoria al intentar detener un stream de música sin el loop activado una vez este había finalizado su reproducción.
- Mejorada la detección de cambios en las propiedades de la ventana para forzar el redibujado en algunas funciones.


--------------------------------------------------------------------------------
2021-12-05 Ver.1.7.0-beta
--------------------------------------------------------------------------------
- Añadido el método GetFps() a la clase NGN_Graphics, el cual devuelve el número actual de fotogramas por segundo del render.
- Actualizado el método que limita el framerate por software, siendo ahora más preciso y estable con pantallas con un refresco superior a 60hz.
- Añadida la propiedad text_boundaries a la clase NGN_TextLayer, la cual almacena el tamaño del texto escrito en la capa desde el uso de la instrucción Print(). Si no hay texto en la capa, devuelve -1.
- Añadido el método RaycastPoint() a la clase NGN_Collisions, el cual devuelve si en la coordenada especificada hay o no un píxel visible del sprite dado. Este sprite puede estar rotado o escalado.
- Optimizaciones menores en las sobrecargas de alguna clases.
- Documentación del manual del usuario actualizada.


--------------------------------------------------------------------------------
2021-10-12 Ver.1.6.0-beta
--------------------------------------------------------------------------------
- Modificaciones en la utilidad NGN_FileSystem, la cual ahora se asegura de que la FAT creada esté ordenada alfabéticamente en orden ascendente.
- Cambiado el método de búsqueda de la clase NGN_FileSystem. Ahora busca los archivos dentro del empaquetado en modo indexado en vez de secuencial. Esto significa que, en un empaquetado con 20,000 archivos, puede localizar el archivo solicitado con aproximadamente 14 consultas.


--------------------------------------------------------------------------------
2021-08-04 Ver.1.5.0-stable
--------------------------------------------------------------------------------
- Correcciones menores en algunos mensajes de alerta.
- Añadida la propiedad "total_frames" a la clase NGN_Sprite.
- Añadida la clase NGN_Image para la manipulación de imágenes en formato RAW y la creación de máscaras.
- Añadidos los métodos PngAsRaw(), SpriteAsRaw() y SpriteAsRawVector() a la clase NGN_Load para la carga de texturas y sprites y su conversión a RAW.
- Añadidos los ejemplos de uso de las nuevas funcionalidades.
- Añadido un mixer de audio en la clase "NGN_Sound" para ajustar el volumen maestro, del canal de músicas, del canal de efectos de sonido y dos canales auxiliares. Los métodos que incluye la clase son: SetMixerLevel() y GetMixerLevel(). Además, se han modificado los métodos PlaySfx() y OpenMusic() para poder asignar un canal del mixer al llamarlos. También se han definido las constantes MIXER_MASTER_CH, MIXER_MUSIC_CH, MIXER_EFFECTS_CH, MIXER_AUX1_CH y MIXER_AUX2_CH para identificar los distintos canales.
- Añadida la clase NGN_Disk para el acceso a los archivos del disco duro.
- El método ScreenShot() de la clase NGN_Graphics ahora crea el directorio de destino si este no existe.
- Añadido el método SetVerticalSync() a la clase NGN_Graphics.
- Añadida la clase NGN_Log para la creación de mensajes y archivos de registro de la actividad del programa. Todos los errores y alertas de N'gine a partir de esta versión utilizaran este método.
- Pequeños cambios en la lectura de caracteres en el método Print() de la clase NGN_TextLayer.
- Añadidos los métodos Utf8ToAnsi() y AnsiToUtf8() en la clase NGN_ToolBox para convertir una cadena de texto en formato UTF-8 (de dos bytes) a ANSI y viceversa.
- Corregido un BUG en el método Reset() de la clase NGN_Camera, el cual no reiniciaba como es debido la posición y el target.
- Añadido el soporte para los operadores == y != a las clases Vector2.
- Corregido el error de división entre 0 en el método Normalize() de la clase Vector2, el cual se producía si ambos componentes del vector eran 0.
- Se ha actualizado la versión de SDL2 a la 2.0.14.


--------------------------------------------------------------------------------
2021-02-27 Ver.1.4.0-beta
--------------------------------------------------------------------------------
- Reescrita la clase de carga de archivos, usando funciones propias para la carga previa de todos los archivos en un buffer de datos en RAM.
- Corregido un bug que en caso de que fallara la abertura de un stream de música, este eliminaba la instancia de la cola de efectos de sonido en vez de la cola de streams de música.
- Optimizaciones menores de código en diversas clases.
- Añadido el soporte para empaquetado de archivos. Se incluyen las funciones para su uso en N'gine, así como la herramienta necesaria para crear estos paquetes de archivos (NGN_FileSystem). La herramienta permite el empaquetado y desempaquetado de archivos, con y sin encriptación. La librería detecta que se quiere hacer uso de la carga de archivos a través de un paquete mediante el uso del comando SetPackage() de la clase NGN_Load.
- Añadido el método LoadFile(); en la clase NGN_Load para la carga de un archivo a un vector de datos.
- Reorganización de los archivos del código fuente de la librería, separando en diferentes carpetas los archivos pertenecientes a librerías externas.
- Corregido un bug del día 0 en la clase NGN_Load que sobredimensionaba el buffer de RAM para cargar los sprites.
- Se ha actualizado la documentación.
- Corregido el nombre del archivo "resource.rc".
- Se han actualizado los templates de la librería.


--------------------------------------------------------------------------------
2021-01-10 Ver.1.3.0-beta
--------------------------------------------------------------------------------
- Se han reescrito los tipos de dato Vector2, pasando de ser una estructura a ser una clase, añadiendo además las funcionalidades de las operaciones de suma y resta entre vectores y las de multiplicación y división por un escalar. Se han añadido los métodos Magnitude() a todos los tipos de vector y el método Normalize() a los vectores de punto flotante.
- Se ha creado la clase NGN_Math con funciones matemáticas comunes, como los cálculos de distancia, cálculos de ángulos entre 2 puntos, etc.
- Los Métodos GetDistance() de la clase NGN_Toolbox se mueven a la clase NGN_Math. Si algún proyecto las usa, deberá reemplazar la orden ngn->toolbox->GetDistance() por ngn->math->GetDistance();
- El método ScreenShot() de la clase "NGN_Graphics" ahora soporta la inclusión de la superposición de una textura como marca de agua, con ajuste de su opacidad.
- Actualizada la documentación correspondiente y los ejemplos.


--------------------------------------------------------------------------------
2020-11-08 Ver.1.2.0-beta
--------------------------------------------------------------------------------
- Añadidos los métodos GetPixelColor() y GetPixelRgba() a la clase NGN_Canvas.
- Añadido el método ScreenShot(); a la clase NGN_Graphics, el cual realiza una captura del frame actual y la guarda en el disco en formato PNG.
- Añadidos los ejemplos de uso de los nuevos métodos.
- Documentación actualizada.
- Los binarios de la librería se compilan con el compilador GCC 8.1.0 MinGW (SEH) - 64-bits. Los archivos DLL de SFML se actualizan para funcionar con esta versión.
- Se recompilan las herramientas y se añaden protecciones adicionales en la generación del nombre de archivo.


--------------------------------------------------------------------------------
2020-11-03 Ver.1.1.0-beta
--------------------------------------------------------------------------------
- Corregido el escalado de las capas de texto cuando se cambiaba su tamaño.
- Añadido el parámetro y propiedad "filtering", que permite activar o desactivar el filtrado bilineal del contenido de la capa de texto.
- Reescrita toda la clase NGN_Canvas para usar métodos propios de dibujado. Dado que es una clase que solo se solía usar hasta el momento para fines educativos y no debería afectar en gran medida a proyectos anteriores, se han eliminado, modificado y añadido los siguientes métodos:
  - Se han eliminado de la clase los siguientes métodos:
    - Points()
    - Lines()
    - FilledCircle()
  - Se han modificado los siguientes métodos:
    - Circle()
  - Se han añadido los siguientes métodos:
    - Arc()
- Corregido en la clase NGN_Input el método que devuelve las coordenadas del ratón en pantalla, filtrando ahora estos datos y adaptándolos al escalado y resolución de la pantalla en sus diversos modos.


--------------------------------------------------------------------------------
2020-06-26 Ver.1.0.0-stable
--------------------------------------------------------------------------------
- Se añade la posibilidad de forzar el estado filtrado local de los viewports. El filtrado general de la escena se seguirá aplicando si este está activo, pero ahora se puede escoger si aplicar o no de manera independiente en cada uno de los viewports un filtrado adicional (útil para reducciones). Esta propiedad se puede modificar mediante el método ViewportLocalFilter() de la clase "NGN_Graphics".
- Se actualiza la documentación y los ejemplos.
- Después de varios años de desarrollo y pruebas, se abandona el estado "alpha", siendo esta la primera release considerada "estable".


--------------------------------------------------------------------------------
2020-06-25 Ver.0.13.0-a
--------------------------------------------------------------------------------
- Actualizados los templates de la librería.
- Correcciones en los textos informativos de las utilidades.
- Modificado el motor de render para trabajar con un backbuffer. Esto permite habilitar o deshabilitar el filtrado bilinear de la escena en tiempo real.
- Añadido el método SetFiltering() en la clase "NGN_Graphics", el cual permite habilitar o deshabilitar el filtrado bilinear. Se ha añadido también la propiedad "filtering" a la clase para consultar el estado del filtrado.
- Actualizados los ejemplos "Window modes" y "Multiple Viewports", incluyendo ahora la posibilidad de aplicar el filtrado bilinear.


--------------------------------------------------------------------------------
2020-06-22 Ver.0.12.0-a
--------------------------------------------------------------------------------
- Ahora se detecta el cambio de foco/cambio de modo de pantalla para forzar el redibujado de la escena.
- Añadidos los métodos SendToFront() y SendToBack() a la clase "NGN_Camera", los cuales envían un sprite al frente o al fondo su capa respectivamente.
- Optimizado el algoritmo de render de los fondos de tiles. También se ha cambiado la rutina de carga de estos archivos.
- Añadido el método SetMode() a la clase "NGN_Graphics", el cual nos permite cambiar el tamaño y modo de la ventana entre ventana x1, x2, x3, x4, ventana completa o pantalla completa, a tiempo real y sin reiniciar el programa. Por contra, desaparece el uso de la variable full_screen para estos cambios.
- Añadido el método GetDesktopResolution(); a la clase "NGN_Graphics", el cual devuelve la resolución del escritorio.
- Se añade el ejemplo de uso del método SetMode().
- La librería LodePNG se actualiza a la versión 20200306.
- Los binarios de la librería se compilan con la versión de SDL2 2.0.12.
- Templates actualizados.


--------------------------------------------------------------------------------
2020-03-18 Ver.0.11.0-a
--------------------------------------------------------------------------------
- Ajustes en el algoritmo de cálculo del efecto "panning" de los efectos sonido, para un mejor equilibrio de volumen.
- Añadida la funcionalidad de "rumble" para los controladores que lo soporten.
- Optimizada la lectura del estado de las teclas.
- Añadido el método para el clonado de Sprites en la clase "NGN_Graphics".
- Añadida la propiedad de modo de mezcla de color (blending) a las clases "NGN_Canvas", "NGN_Sprite", "NGN_TextLayer", "NGN_Texture" y "NGN_TiledBg". Esta propiedad puede tener los valores NGN_BLENDMODE_NONE, NGN_BLENDMODE_ALPHA, NGN_BLENDMODE_ADDITIVE y NGN_BLENDMODE_MODULATE, estableciéndose por defecto el valor NGN_BLENDMODE_ALPHA.
- Se ha actualizado la documentación y los ejemplos.


--------------------------------------------------------------------------------
2019-12-29 Ver.0.10.0-a
--------------------------------------------------------------------------------
- Añadida la propiedad "box_enabled" a la clase "NGN_Sprite", la cual permite habilitar o deshabilitar la caja de colisión principal.
- Ahora los Sprites pueden disponer de colisionadores adicionales.
- Añadidos los métodos "AddCollider", "GetColliderId", "ColliderEnabled" y "RemoveCollider" a la clase "NGN_Sprite".
- Se ha actualizado la documentación.
- Añadido el ejemplo para el uso de múltiples colisionadores en los sprites.
- Ajustes menores en el algoritmo de detección de colisiones por cajas.
- N'gine recompilado con la versión 2.0.10 de SDL2.
- N'gine para Linux Mint actualizado a la versión 17.3 TRICIA.


--------------------------------------------------------------------------------
2019-09-04 Ver.0.9.1-a
--------------------------------------------------------------------------------
- Documentación actualizada con la nueva URL del sitio oficial.


--------------------------------------------------------------------------------
2019-06-18 Ver.0.9.0-a
--------------------------------------------------------------------------------
- Añadida la clase "NGN_ToolBox" a la librería, la cual contiene herramientas genéricas de ayuda a la programación.
- Añadido el método "Int2String" a la clase "NGN_ToolBox", el cual convierte un número entero a cadena de texto con formato.
- Añadido el método "Float2String" a la clase "NGN_ToolBox", el cual convierte un número decimal a cadena de texto con formato.
- Añadido el método "GetDistance" a la clase "NGN_ToolBox", el cual devuelve la distancia entre 2 puntos (4 sobrecargas).
- Añadidas las constantes "NGN_VERSION_MAJOR", "NGN_VERSION_MINOR", "NGN_VERSION_PATCH" y "NGN_VERSION_METADATA", las cuales indican la versión de N'gine.
- Añadido el método "GetVersion" en la clase "NGN_System", el cual devuelve un string con la versión actual de N'gine.
- Actualizados los templates de N'gine para code::blocks, mostrando ahora en la consola la versión de N'gine si se ejecutan en modo "debug".
- Actualizados los templates de N'gine para code::blocks, declarando el define "MODE_DEBUG" cuando se selecciona este.
- Actualizados todos los ejemplos del uso de las funciones de N'gine.
- Actualizada la librería para el uso de SDL2 2.0.9, SDL2_TTF 2.0.15, SFML 2.5.1 y LodePNG 20190615.


--------------------------------------------------------------------------------
2019-03-28 Ver.0.8.0-a
--------------------------------------------------------------------------------
- Actualizada la documentación del usuario.
- Añadida la sobrecarga al constructor de la clase NGN_Texture para la creación de texturas en blanco.
- Añadido el método ClearContent(); a la clase NGN_Texture para borrar el contenido de una textura, si esta se ha creado en blanco.
- Añadido el método RenderToTexture(NGN_Texture* texture); en la clase NGN_Render para fijar una textura como destino del render.
- Añadido el método RenderToScreen(); en la clase NGN_Render para fijar el surface por defecto como destino del render.
- Añadidas las sobrecargas de los métodos PushSprite(); RemoveSprite(); ChangeLayer(); de la clase NGN_Camera para poder registrar texturas como sprites en la cámara 2D.
- Añadida la posibilidad de crear animaciones de los sprites con orden decreciente en los frames (animación inversa).
- Corregido un bug en la inicialización de los viewports.


--------------------------------------------------------------------------------
2019-03-04 Ver.0.7.0-a
--------------------------------------------------------------------------------
- Corregido un BUG en la lectura del POV de los controladores si ningún controlador estaba conectado, dando falsos positivos en la lectura.
- Reescrita en su totalidad la rutina de detección de los controladores, conservando ahora su ID aunque se desconecte un controlador con ID inferior.
- Cambiados los tipos de dato de algunos parámetros en las clases NGN_Camera, NGN_Canvas, NGN_Sprite, NGN_TextLayer y NGN_Texture y su documentación.
- Modificadas algunas definiciones de parámetros internos de N'gine, pasando a usar el método "static const" en vez de "#define".
- Añadida la opción de la creación y render hacia diferentes viewports seleccionables, mediante los métodos OpenViewport(); CloseViewport(); SelectViewport(); ViewportPosition(); DefaultViewport(); en la clase NGN_Graphics y del método render->Viewports(); en la clase NGN_Render;
- Internamente se genera un ID de frame en tiempo de ejecución, de este modo es posible evitar que varias llamadas a PlayAnimation(); aceleren la animación de los sprites.
- Eliminadas temporalmente las opciones de "overscan" de los fondos de tiles debido a su incompatibilidad con el sistema de "viewports" y su bajo rendimiento en general.
- Añadido el ejemplo para el uso de múltiples viewports.


--------------------------------------------------------------------------------
2018-07-09 Ver.0.6.1-a
--------------------------------------------------------------------------------
- Se incorporaron los archivos DLL necesarios para las utilidades de la librería en su versión para Windows.
- Se añadió la sobrecarga al método NGN_Sound::OpenMusic() que nos permite escoger los puntos de entrada y salida del bucle (LOOP).
- Se añadió el ejemplo de bucle de música cambiando los puntos de bucle.


--------------------------------------------------------------------------------
2018-05-31 Ver.0.6.0-a
--------------------------------------------------------------------------------
[Windows]
- Binarios de la librería compilados para el uso de SDL2 2.0.8.
- Binarios de la librería compilados para el uso de SFML 2.5.0.
- Binarios de la librería compilados usando MinGW-windows-gcc-7.3.0.
- Documentación de instalación actualizada.
[General]
- Binarios de la librería compilados para entornos x64.
- Templates actualizados para su compilación en 64 bits.
- Ejemplos compilados a 64 bits.


--------------------------------------------------------------------------------
2018-05-07 Ver.0.5.3-a
--------------------------------------------------------------------------------
- Añadida la posibilidad de cambiar el centro de la caja de colisión de los sprites mediante el uso de un offset.
- Actualizada la documentación de la clase NGN_Sprite.
- Añadido el flag "animation_pause" a la clase NGN_Camera, el cual pausa la animación de todos los sprites si está en TRUE.
- Cambios menores en la estructura de la clase "NGN_Camera".
- Cambio en la estructura interna de NGN_Sprite y NGN_SpriteData, almacenando ahora cada fotograma en una textura independiente, lo cual soluciona el problema del límite de altura del sprite sheet de 8192 pixeles. Ahora cada fotograma puede tener un tamaño máximo de 8192x8192 pixeles. Esto no afecta al formato interno de los archivos .SPR y no es necesario reconvertirlos ni realizar ningún cambio en los proyectos existentes.
- Corregido el bug en el método NGN_Load::Sprite(); el cual reservaba más memoria de la requerida al cargar el sprite sheet.
- Añadido el ejemplo para el uso del hitbox ajustable de los Sprites.


--------------------------------------------------------------------------------
2018-03-22 Ver.0.5.2-a
--------------------------------------------------------------------------------
- Actualizados los templates para auto-detectar el sistema operativo de destino y así poder adaptar el método óptimo para el cambio del modo de pantalla.
- Añadido el include a la librería "cstdint" para asegurar el uso de tipos de dato intxx_t de C++ 11.
- Corregido un BUG en el template de "Menu", el cual no eliminaba los datos del cursor al destruir el objeto.
- Añadido el soporte a gamepad en el template "Menu".
- Al crear una capa de texto, se ejecuta automáticamente el comando Cls(); para aplicar la textura de fondo de manera automática.


--------------------------------------------------------------------------------
2018-02-03 Ver.0.5.1-a
--------------------------------------------------------------------------------
- Corregido un error en la detección de la relación de aspecto de la pantalla en el modo "SCR_WINDOW_FULL".


--------------------------------------------------------------------------------
2018-02-02 Ver.0.5.0-a
--------------------------------------------------------------------------------
- Se han actualizado las plantillas de la librería.
- Ahora, el protector de pantalla se deshabilita automáticamente al iniciarse el programa.
- Se ha modificado el orden de los parámetros del método NGN_Graphics::Init() para mayor facilidad de uso.
- La opción VSYNC se deshabilita de manera automática si el refresco del monitor es inferior a 60 Hz.
- Se ha reescrito el método para el cambio de modo de pantalla, pudiendo ahora escoger entre modo ventana, ventana a pantalla completa y pantalla completa. Esto evita el dibujado de elementos fuera de lugar en modo pantalla completa en algunas tarjetas gráficas. Se recomienda el uso de modo "SCR_WINDOW_FULL" (modo ventana completa) en Linux.
- El parámetro window_name en el método NGN_Graphics::Init() es ahora del tipo string y se almacena en la propiedad window_caption.
- Se ha añadido el método NGN_Graphics::SetViewportClip(), el cual permite definir el área visible de la pantalla.
- Se ha añadido el método NGN_Graphics::ShowMouse() para mostrar y ocultar el cursor del ratón cuando estamos en el foco de la aplicación.


--------------------------------------------------------------------------------
2018-01-17 Ver.0.4.4-a
--------------------------------------------------------------------------------
- Modificado el método CloseMusic(); de la clase NGN_Sound para que, en caso de que un stream de música sin loop finalice, no se produzca un error de protección en runtime si se intenta cerrar el mismo.


--------------------------------------------------------------------------------
2018-01-17 Ver.0.4.3-a
--------------------------------------------------------------------------------
- Actualizado el template de la librería y los ejemplos para que incorporen un icono al archivo ejecutable de Windows que se genere.
- Añadido un nuevo template para la creación de aplicaciones con pantallas de inicio y menú.
- Añadida la función StopAll(); a la clase SOUND, la cual detiene todos los SFX activos y cierra todos los streams de música abiertos.


--------------------------------------------------------------------------------
2018-01-10 Ver.0.4.2-a
--------------------------------------------------------------------------------
- Corregido un bug en el método Cls() de la clase TEXT_LAYER el cual causaba que no se borrara el contenido de la capa de texto si el color de fondo tenía un valor de alpha igual a 0.
(Gracias a David Bassaganya por el aviso)


--------------------------------------------------------------------------------
2017-12-19 Ver.0.4.1-a
--------------------------------------------------------------------------------
- Añadidas el resto de teclas pendientes del teclado (US) a la clase INPUT.
- Detectado un bug de SDL2 en Linux que causaba que las texturas generadas no realizasen correctamente la transparencia al ser rellenadas por primera vez. Esto causaba que en las capas de texto donde se usaba una imagen de fondo, esta no se mostrara correctamente después del comando CLS en Linux, en Windows por contra, funcionaba sin problemas. Se ha solucionado realizando un doble borrado de la textura con los colores 0xFFFFFFFF y 0x00000000 antes de aplicar la imagen de fondo a la textura.


--------------------------------------------------------------------------------
2017-11-14 Ver.0.4.0-a
--------------------------------------------------------------------------------
- Añadidas las funciones de colisión entre Sprites por "Pixel Perfect".
- Añadidas las sobrecargas para poder usar el tipo de dato "Vector2" en la mayoría de funciones de desplazamiento y de posicionamiento (Translate() y Position()).


--------------------------------------------------------------------------------
2017-11-14 Ver.0.3.0-a
--------------------------------------------------------------------------------
- Compilación de los binarios de N'gine para Windows usando las nuevas versiones de las librerías SDL y SFML (SDL 2.0.7 y SFML 2.4.2).
- Pequeñas correcciones en los textos informativos de la utilidad "PNG to Collision Map converter".
- Cambio del formato de color en la función NGN_TextLayer::CanvasColor() de ARGB a RGBA.
- Cambio de la definición DEFAULT_VALUE de (1 << 31) a 0x7FFFFFFF.
- Cambios menores de la detección de parámetros en la función NGN_Graphics::Init(), adaptándola al nuevo DEFAULT_VALUE.
- Cambios menores en la clase NGN_Camera, adaptándola al nuevo DEFAULT_VALUE.
- Añadidas las primeras funciones de Canvas.
- Añadidas funciones internas para la limpieza de los buffers en su proceso de creación.
- Añadidos los ejemplos de Canvas y pequeñas correcciones en el ejemplo de uso de la cámara.

--------------------------------------------------------------------------------
2017-10-24 Ver.0.2.0-a
--------------------------------------------------------------------------------
- Se modificó el formato de píxeles en los mapas de colisión de ABGR a RGBA.
- Se cambió el sistema de almacenamiento en archivo y en RAM del mapa de colisiones, utilizando tiles para comprimir la información del mismo.
- Se optimizó el contador de progreso en las utilidades.
- Se optimizó la detección de argumentos en las utilidades.
- Se optimizó la generación de nombres de archivo en las utilidades.
- Se actualizó el ejemplo de uso de los mapas de colisión.


--------------------------------------------------------------------------------
2017-10-04 Ver.0.1.0-a
--------------------------------------------------------------------------------
- Primera prelanzamiento en estado Alfa.